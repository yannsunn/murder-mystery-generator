# 🚀 Ultra Advanced CI/CD Pipeline
# 限界突破: ゼロダウンタイム・AI駆動デプロイメント

name: 🔥 Ultra Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]
  schedule:
    # 毎日午前2時に自動最適化実行
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'normal'
        type: choice
        options:
        - normal
        - canary
        - blue-green
        - rollback
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - development
        - staging
        - production

env:
  NODE_VERSION: '18'
  DEPLOYMENT_TIMEOUT: '600'
  MAX_RETRY_ATTEMPTS: '3'

jobs:
  # ===================================================================
  # Phase 1: 高度分析・品質チェック
  # ===================================================================
  advanced-analysis:
    name: 🔍 Advanced Code Analysis
    runs-on: ubuntu-latest
    outputs:
      quality-score: ${{ steps.quality.outputs.score }}
      security-score: ${{ steps.security.outputs.score }}
      performance-score: ${{ steps.performance.outputs.score }}
      deployment-recommendation: ${{ steps.ai-analysis.outputs.recommendation }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 完全履歴取得
    
    - name: ⚙️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npm audit --audit-level moderate
    
    - name: 🔍 Advanced Code Quality Analysis
      id: quality
      run: |
        echo "🔍 コード品質分析実行中..."
        
        # ESLint with advanced rules
        npm run lint 2>&1 | tee lint-report.txt || true
        
        # TypeScript type checking
        npm run type-check 2>&1 | tee typecheck-report.txt || true
        
        # Code complexity analysis
        npx complexity-report --format json --output complexity.json src/ || true
        
        # Calculate quality score
        LINT_ERRORS=$(grep -c "error" lint-report.txt || echo "0")
        TYPE_ERRORS=$(grep -c "error" typecheck-report.txt || echo "0")
        TOTAL_ERRORS=$((LINT_ERRORS + TYPE_ERRORS))
        
        if [ $TOTAL_ERRORS -eq 0 ]; then
          QUALITY_SCORE=100
        elif [ $TOTAL_ERRORS -le 5 ]; then
          QUALITY_SCORE=80
        elif [ $TOTAL_ERRORS -le 15 ]; then
          QUALITY_SCORE=60
        else
          QUALITY_SCORE=40
        fi
        
        echo "score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
        echo "🎯 Code Quality Score: $QUALITY_SCORE"
    
    - name: 🛡️ Advanced Security Scanning
      id: security
      run: |
        echo "🛡️ セキュリティスキャン実行中..."
        
        # Dependency vulnerability check
        npm audit --json > security-audit.json || true
        
        # SAST (Static Application Security Testing)
        npx semgrep --config=auto --json --output=sast-report.json . || true
        
        # Secret scanning
        npx secretlint "**/*" --format json --output secretlint-report.json || true
        
        # Calculate security score
        VULNS=$(jq '.vulnerabilities | length' security-audit.json 2>/dev/null || echo "0")
        CRITICAL_VULNS=$(jq '.vulnerabilities[] | select(.severity == "critical") | length' security-audit.json 2>/dev/null || echo "0")
        
        if [ "$CRITICAL_VULNS" -gt 0 ]; then
          SECURITY_SCORE=20
        elif [ "$VULNS" -gt 10 ]; then
          SECURITY_SCORE=50
        elif [ "$VULNS" -gt 5 ]; then
          SECURITY_SCORE=70
        elif [ "$VULNS" -gt 0 ]; then
          SECURITY_SCORE=85
        else
          SECURITY_SCORE=100
        fi
        
        echo "score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
        echo "🛡️ Security Score: $SECURITY_SCORE"
    
    - name: ⚡ Performance Analysis
      id: performance
      run: |
        echo "⚡ パフォーマンス分析実行中..."
        
        # Bundle size analysis
        npm run build 2>&1 | tee build-output.txt || true
        
        # Bundle analyzer
        npx webpack-bundle-analyzer build/static/js/*.js --no-open --report bundle-report.json || true
        
        # Performance budget check
        BUNDLE_SIZE=$(du -sb build/ | cut -f1 2>/dev/null || echo "0")
        MAX_BUNDLE_SIZE=5242880 # 5MB
        
        if [ $BUNDLE_SIZE -lt $((MAX_BUNDLE_SIZE / 2)) ]; then
          PERFORMANCE_SCORE=100
        elif [ $BUNDLE_SIZE -lt $MAX_BUNDLE_SIZE ]; then
          PERFORMANCE_SCORE=80
        elif [ $BUNDLE_SIZE -lt $((MAX_BUNDLE_SIZE * 2)) ]; then
          PERFORMANCE_SCORE=60
        else
          PERFORMANCE_SCORE=40
        fi
        
        echo "score=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT
        echo "⚡ Performance Score: $PERFORMANCE_SCORE"
        echo "📦 Bundle Size: $(( $BUNDLE_SIZE / 1024 ))KB"
    
    - name: 🤖 AI-Driven Analysis
      id: ai-analysis
      run: |
        echo "🤖 AI分析実行中..."
        
        QUALITY_SCORE="${{ steps.quality.outputs.score }}"
        SECURITY_SCORE="${{ steps.security.outputs.score }}"
        PERFORMANCE_SCORE="${{ steps.performance.outputs.score }}"
        
        OVERALL_SCORE=$(( (QUALITY_SCORE + SECURITY_SCORE + PERFORMANCE_SCORE) / 3 ))
        
        if [ $OVERALL_SCORE -ge 90 ]; then
          RECOMMENDATION="fast-track"
        elif [ $OVERALL_SCORE -ge 75 ]; then
          RECOMMENDATION="normal"
        elif [ $OVERALL_SCORE -ge 60 ]; then
          RECOMMENDATION="careful"
        else
          RECOMMENDATION="hold"
        fi
        
        echo "recommendation=$RECOMMENDATION" >> $GITHUB_OUTPUT
        echo "🤖 AI Recommendation: $RECOMMENDATION (Score: $OVERALL_SCORE)"
    
    - name: 📊 Upload Analysis Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: analysis-reports
        path: |
          *.txt
          *.json
        retention-days: 30

  # ===================================================================
  # Phase 2: 高度テストスイート
  # ===================================================================
  advanced-testing:
    name: 🧪 Advanced Testing Suite
    runs-on: ubuntu-latest
    needs: advanced-analysis
    if: needs.advanced-analysis.outputs.deployment-recommendation != 'hold'
    strategy:
      matrix:
        test-type: [unit, integration, e2e, performance, load]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ⚙️ Setup Test Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install Dependencies
      run: npm ci
    
    - name: 🗄️ Setup Test Database
      run: |
        echo "🗄️ テストデータベースセットアップ..."
        # Supabaseテストプロジェクト設定
        npm run db:setup || true
    
    - name: 🧪 Run Test Suite - ${{ matrix.test-type }}
      run: |
        case "${{ matrix.test-type }}" in
          "unit")
            echo "🧪 ユニットテスト実行中..."
            npm run test -- --coverage --watchAll=false
            ;;
          "integration")
            echo "🔗 統合テスト実行中..."
            npm run test:integration || npm run test
            ;;
          "e2e")
            echo "🌐 E2Eテスト実行中..."
            npm run test:e2e || echo "E2E tests not configured"
            ;;
          "performance")
            echo "⚡ パフォーマンステスト実行中..."
            npm run test:performance || echo "Performance tests not configured"
            ;;
          "load")
            echo "🔥 負荷テスト実行中..."
            npm run test:load || echo "Load tests not configured"
            ;;
        esac
    
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          coverage/
          test-results/
        retention-days: 30

  # ===================================================================
  # Phase 3: インテリジェントデプロイメント
  # ===================================================================
  intelligent-deployment:
    name: 🚀 Intelligent Deployment
    runs-on: ubuntu-latest
    needs: [advanced-analysis, advanced-testing]
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ⚙️ Setup Deployment Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install Dependencies
      run: npm ci --production
    
    - name: 🏗️ Build Application
      run: |
        echo "🏗️ アプリケーションビルド中..."
        npm run build
        
        # Build optimization
        echo "⚡ ビルド最適化中..."
        npx terser-webpack-plugin || true
        npx compression-webpack-plugin || true
    
    - name: 🤖 AI Deployment Strategy
      id: strategy
      run: |
        RECOMMENDATION="${{ needs.advanced-analysis.outputs.deployment-recommendation }}"
        INPUT_TYPE="${{ github.event.inputs.deployment_type || 'normal' }}"
        
        case "$RECOMMENDATION" in
          "fast-track")
            STRATEGY="blue-green"
            ;;
          "normal")
            STRATEGY="${INPUT_TYPE}"
            ;;
          "careful")
            STRATEGY="canary"
            ;;
          *)
            STRATEGY="canary"
            ;;
        esac
        
        echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
        echo "🤖 Selected Strategy: $STRATEGY"
    
    - name: 🚀 Execute Deployment
      id: deploy
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      run: |
        echo "🚀 デプロイメント実行中..."
        STRATEGY="${{ steps.strategy.outputs.strategy }}"
        
        case "$STRATEGY" in
          "blue-green")
            echo "🔵🟢 Blue-Green デプロイメント"
            # Blue環境にデプロイ
            npx vercel --prod --token=$VERCEL_TOKEN --env SUPABASE_URL="$SUPABASE_URL" --env SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY" --env GROQ_API_KEY="$GROQ_API_KEY"
            DEPLOY_URL=$(npx vercel --prod --token=$VERCEL_TOKEN | tail -n1)
            ;;
          "canary")
            echo "🐤 Canary デプロイメント"
            # 10%のトラフィックでカナリアリリース
            npx vercel --token=$VERCEL_TOKEN --env SUPABASE_URL="$SUPABASE_URL" --env SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY" --env GROQ_API_KEY="$GROQ_API_KEY"
            DEPLOY_URL=$(npx vercel --token=$VERCEL_TOKEN | tail -n1)
            ;;
          *)
            echo "🔄 通常デプロイメント"
            npx vercel --prod --token=$VERCEL_TOKEN --env SUPABASE_URL="$SUPABASE_URL" --env SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY" --env GROQ_API_KEY="$GROQ_API_KEY"
            DEPLOY_URL=$(npx vercel --prod --token=$VERCEL_TOKEN | tail -n1)
            ;;
        esac
        
        echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        echo "🌐 Deployed to: $DEPLOY_URL"
    
    - name: 🔄 Post-Deployment Health Check
      run: |
        echo "🔄 デプロイ後ヘルスチェック実行中..."
        DEPLOY_URL="${{ steps.deploy.outputs.url }}"
        
        # Health check with retry
        for i in {1..5}; do
          if curl -f -s "$DEPLOY_URL/api/health" > /dev/null; then
            echo "✅ Health check passed (attempt $i)"
            break
          else
            echo "⏳ Health check failed, retrying... (attempt $i)"
            sleep 30
          fi
        done
        
        # Performance validation
        echo "⚡ パフォーマンス検証中..."
        curl -w "@curl-format.txt" -o /dev/null -s "$DEPLOY_URL" || true
    
    - name: 📊 Deployment Metrics
      run: |
        echo "📊 デプロイメントメトリクス収集中..."
        
        # Deployment time
        DEPLOY_END=$(date +%s)
        echo "⏱️ Deployment completed at: $(date)"
        
        # Log metrics to external service (if configured)
        curl -X POST "https://api.example.com/metrics" \
          -H "Content-Type: application/json" \
          -d '{"deployment_time":"'$(date -Iseconds)'","success":true,"strategy":"${{ steps.strategy.outputs.strategy }}"}' \
          || echo "📊 External metrics logging not configured"

  # ===================================================================
  # Phase 4: 継続監視・自動復旧
  # ===================================================================
  continuous-monitoring:
    name: 📊 Continuous Monitoring
    runs-on: ubuntu-latest
    needs: intelligent-deployment
    if: success()
    
    steps:
    - name: 📥 Setup Monitoring
      run: |
        echo "📊 継続監視セットアップ中..."
        
        # Health monitoring setup
        DEPLOY_URL="${{ needs.intelligent-deployment.outputs.url }}"
        
        # Set up monitoring alerts
        echo "🔔 監視アラート設定中..."
        
    - name: 🤖 AI-Powered Auto-Recovery Setup
      run: |
        echo "🤖 AI自動復旧システムセットアップ中..."
        
        # Auto-rollback configuration
        echo "🔄 自動ロールバック設定中..."
        
        # Performance degradation detection
        echo "📈 パフォーマンス劣化検知設定中..."

  # ===================================================================
  # Phase 5: 自動最適化・学習
  # ===================================================================
  auto-optimization:
    name: 🧠 Auto-Optimization & Learning
    runs-on: ubuntu-latest
    needs: continuous-monitoring
    if: success() && github.event_name == 'schedule'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🧠 AI Learning Process
      run: |
        echo "🧠 AI学習プロセス実行中..."
        
        # Collect deployment metrics
        echo "📊 デプロイメントメトリクス収集中..."
        
        # Performance pattern analysis
        echo "📈 パフォーマンスパターン分析中..."
        
        # Optimization recommendations
        echo "💡 最適化推奨事項生成中..."
    
    - name: 🔄 Automatic Code Optimization
      run: |
        echo "🔄 自動コード最適化実行中..."
        
        # Bundle optimization
        npm run optimize || echo "Optimization not configured"
        
        # Dead code elimination
        npx unused-deps || echo "Unused deps check not configured"
        
        # Performance improvements
        echo "⚡ パフォーマンス改善適用中..."

# ===================================================================
# Workflow Completion Notification
# ===================================================================
  notification:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [intelligent-deployment, continuous-monitoring]
    if: always()
    
    steps:
    - name: 📢 Send Notification
      run: |
        if [[ "${{ needs.intelligent-deployment.result }}" == "success" ]]; then
          echo "✅ デプロイメント成功通知送信中..."
          STATUS="✅ SUCCESS"
          COLOR="good"
        else
          echo "❌ デプロイメント失敗通知送信中..."
          STATUS="❌ FAILED"
          COLOR="danger"
        fi
        
        # Slack notification (if configured)
        curl -X POST "${SLACK_WEBHOOK}" \
          -H 'Content-type: application/json' \
          --data '{"text":"'$STATUS' - Murder Mystery App Deployment","color":"'$COLOR'"}' \
          || echo "Slack notification not configured"
        
        echo "📢 通知送信完了"