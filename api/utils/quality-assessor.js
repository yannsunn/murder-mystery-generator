/**
 * üß† AIÁîüÊàêÂìÅË≥™Ëá™ÂãïË©ï‰æ°„Ç∑„Çπ„ÉÜ„É†
 * ÂïÜÊ•≠ÂìÅË≥™TRPGÂü∫Ê∫ñ„Å´„Çà„ÇãËá™ÂãïÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ„ÉªÊúÄÈÅ©Âåñ
 */

export class QualityAssessor {
  constructor() {
    this.qualityThresholds = {
      narrative: 0.85,      // Áâ©Ë™ûÊÄß
      logic: 0.90,          // Ë´ñÁêÜÊÄß
      balance: 0.80,        // „Ç≤„Éº„É†„Éê„É©„É≥„Çπ
      engagement: 0.85,     // È≠ÖÂäõÂ∫¶
      completeness: 0.95,   // ÂÆåÂÖ®ÊÄß
      consistency: 0.90     // ‰∏ÄË≤´ÊÄß
    };
    
    this.weightings = {
      narrative: 0.20,
      logic: 0.25,
      balance: 0.15,
      engagement: 0.20,
      completeness: 0.15,
      consistency: 0.05
    };
  }

  /**
   * üéØ „É°„Ç§„É≥ÂìÅË≥™Ë©ï‰æ°„Ç®„É≥„Éà„É™„Éº„Éù„Ç§„É≥„Éà
   */
  async evaluateScenario(scenario, formData) {
    try {
      
      const metrics = {
        narrative: await this.checkNarrativeQuality(scenario),
        logic: await this.checkLogicalConsistency(scenario),
        balance: await this.checkGameBalance(scenario, formData),
        engagement: await this.checkEngagementLevel(scenario),
        completeness: await this.checkCompleteness(scenario),
        consistency: await this.checkConsistency(scenario)
      };

      const overallScore = this.calculateOverallScore(metrics);
      const recommendations = this.generateRecommendations(metrics);
      
      const assessment = {
        score: overallScore,
        metrics,
        recommendations,
        passesQuality: overallScore >= 0.85,
        timestamp: Date.now()
      };

      return assessment;
      
    } catch (error) {
      return {
        score: 0.5,
        metrics: {},
        recommendations: ['ÂìÅË≥™Ë©ï‰æ°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'],
        passesQuality: false,
        error: error.message
      };
    }
  }

  /**
   * üìñ Áâ©Ë™ûÊÄßË©ï‰æ°
   */
  async checkNarrativeQuality(scenario) {
    const narrativeChecks = {
      hasTitle: this.checkForTitle(scenario),
      hasPlot: this.checkForPlot(scenario),
      hasCharacterDepth: this.checkCharacterDepth(scenario),
      hasEmotionalHooks: this.checkEmotionalHooks(scenario),
      hasThematicElements: this.checkThematicElements(scenario)
    };

    const weights = {
      hasTitle: 0.1,
      hasPlot: 0.3,
      hasCharacterDepth: 0.3,
      hasEmotionalHooks: 0.2,
      hasThematicElements: 0.1
    };

    return this.calculateWeightedScore(narrativeChecks, weights);
  }

  /**
   * üîç Ë´ñÁêÜÊÄßË©ï‰æ°
   */
  async checkLogicalConsistency(scenario) {
    const logicChecks = {
      hasClues: this.checkForClues(scenario),
      hasEvidence: this.checkForEvidence(scenario),
      hasClearMotives: this.checkForMotives(scenario),
      hasTimelineConsistency: this.checkTimelineConsistency(scenario),
      hasSolvableStructure: this.checkSolvableStructure(scenario)
    };

    const weights = {
      hasClues: 0.25,
      hasEvidence: 0.25,
      hasClearMotives: 0.20,
      hasTimelineConsistency: 0.15,
      hasSolvableStructure: 0.15
    };

    return this.calculateWeightedScore(logicChecks, weights);
  }

  /**
   * ‚öñÔ∏è „Ç≤„Éº„É†„Éê„É©„É≥„ÇπË©ï‰æ°
   */
  async checkGameBalance(scenario, formData) {
    const balanceChecks = {
      appropriateComplexity: this.checkComplexityBalance(scenario, formData),
      timeManagement: this.checkTimeBalance(scenario, formData),
      playerEngagement: this.checkPlayerBalance(scenario, formData),
      difficultyBalance: this.checkDifficultyBalance(scenario),
      informationBalance: this.checkInformationBalance(scenario)
    };

    const weights = {
      appropriateComplexity: 0.25,
      timeManagement: 0.25,
      playerEngagement: 0.20,
      difficultyBalance: 0.15,
      informationBalance: 0.15
    };

    return this.calculateWeightedScore(balanceChecks, weights);
  }

  /**
   * üé≠ È≠ÖÂäõÂ∫¶„Éª„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàË©ï‰æ°
   */
  async checkEngagementLevel(scenario) {
    const engagementChecks = {
      hasHooks: this.checkForEngagementHooks(scenario),
      hasConflict: this.checkForConflict(scenario),
      hasSurprises: this.checkForSurprises(scenario),
      hasPersonalStakes: this.checkPersonalStakes(scenario),
      hasAtmosphere: this.checkAtmosphere(scenario)
    };

    const weights = {
      hasHooks: 0.2,
      hasConflict: 0.2,
      hasSurprises: 0.2,
      hasPersonalStakes: 0.2,
      hasAtmosphere: 0.2
    };

    return this.calculateWeightedScore(engagementChecks, weights);
  }

  /**
   * ‚úÖ ÂÆåÂÖ®ÊÄßË©ï‰æ°
   */
  async checkCompleteness(scenario) {
    const completenessChecks = {
      hasAllSections: this.checkRequiredSections(scenario),
      hasCharacterDetails: this.checkCharacterCompleteness(scenario),
      hasGMGuidance: this.checkGMGuidance(scenario),
      hasResolution: this.checkResolution(scenario),
      hasNoTruncation: this.checkForTruncation(scenario)
    };

    const weights = {
      hasAllSections: 0.3,
      hasCharacterDetails: 0.25,
      hasGMGuidance: 0.2,
      hasResolution: 0.15,
      hasNoTruncation: 0.1
    };

    return this.calculateWeightedScore(completenessChecks, weights);
  }

  /**
   * üîÑ ‰∏ÄË≤´ÊÄßË©ï‰æ°
   */
  async checkConsistency(scenario) {
    const consistencyChecks = {
      characterConsistency: this.checkCharacterConsistency(scenario),
      timelineConsistency: this.checkTimelineConsistency(scenario),
      toneConsistency: this.checkToneConsistency(scenario),
      settingConsistency: this.checkSettingConsistency(scenario)
    };

    const weights = {
      characterConsistency: 0.3,
      timelineConsistency: 0.3,
      toneConsistency: 0.2,
      settingConsistency: 0.2
    };

    return this.calculateWeightedScore(consistencyChecks, weights);
  }

  // ============= Ë©≥Á¥∞„ÉÅ„Çß„ÉÉ„ÇØÈñ¢Êï∞Áæ§ =============

  checkForTitle(scenario) {
    const titlePatterns = [
      /## ‰ΩúÂìÅ„Çø„Ç§„Éà„É´/i,
      /„Çø„Ç§„Éà„É´[:Ôºö]/i,
      /‰ΩúÂìÅÂêç[:Ôºö]/i
    ];
    return titlePatterns.some(pattern => pattern.test(scenario));
  }

  checkForPlot(scenario) {
    const plotKeywords = [
      '‰∫ã‰ª∂', 'Ë¨é', 'ÁúüÁõ∏', 'ÁäØ‰∫∫', 'ÊÆ∫‰∫∫', '‰∫ãÊïÖ', 'ÁßòÂØÜ',
      'Èô∞Ë¨Ä', 'Ë®àÁîª', 'ÂãïÊ©ü', 'Ë®ºÊã†', 'Êâã„Åå„Åã„Çä'
    ];
    const plotCount = plotKeywords.filter(keyword => 
      scenario.includes(keyword)
    ).length;
    return Math.min(plotCount / 5, 1.0); // 5ÂÄã‰ª•‰∏ä„ÅßÊ∫ÄÁÇπ
  }

  checkCharacterDepth(scenario) {
    const depthIndicators = [
      '„Éê„ÉÉ„ÇØ„Çπ„Éà„Éº„É™„Éº', 'ÈÅéÂéª', 'ÁßòÂØÜ', 'ÂãïÊ©ü', 'Èñ¢‰øÇ',
      'ÊÄßÊ†º', 'ÁõÆÊ®ô', 'ÊÅê„Çå', 'È°òÊúõ', 'Â∞ÇÈñÄÁü•Ë≠ò'
    ];
    const depthCount = depthIndicators.filter(indicator => 
      scenario.includes(indicator)
    ).length;
    return Math.min(depthCount / 6, 1.0);
  }

  checkForClues(scenario) {
    const cluePatterns = [
      /Êâã„Åå„Åã„Çä/g,
      /Ë®ºÊã†/g,
      /„Éí„É≥„Éà/g,
      /ÊÉÖÂ†±/g,
      /Áô∫Ë¶ã/g
    ];
    let totalClues = 0;
    cluePatterns.forEach(pattern => {
      const matches = scenario.match(pattern);
      if (matches) totalClues += matches.length;
    });
    return Math.min(totalClues / 10, 1.0); // 10ÂÄã‰ª•‰∏ä„ÅßÊ∫ÄÁÇπ
  }

  checkComplexityBalance(scenario, formData) {
    const complexity = formData?.complexity || 'standard';
    const textLength = scenario.length;
    
    const expectedLengths = {
      simple: { min: 3000, max: 8000 },
      standard: { min: 6000, max: 15000 },
      complex: { min: 10000, max: 25000 }
    };
    
    const range = expectedLengths[complexity];
    if (!range) return 0.5;
    
    if (textLength < range.min) {
      return textLength / range.min;
    } else if (textLength > range.max) {
      return Math.max(0.3, 1 - (textLength - range.max) / range.max);
    }
    
    return 1.0;
  }

  checkTimeBalance(scenario, formData) {
    const complexity = formData?.complexity || 'standard';
    const timeManagementKeywords = [
      '30ÂàÜ', '45ÂàÜ', '60ÂàÜ', 'ÊôÇÈñìÈÖçÂàÜ', 'ÈÄ≤Ë°å', 
      '„Çø„Ç§„É†„É©„Ç§„É≥', '„Éï„Çß„Éº„Ç∫', 'ÊÆµÈöé'
    ];
    
    const timeReferences = timeManagementKeywords.filter(keyword =>
      scenario.includes(keyword)
    ).length;
    
    const expectedReferences = {
      simple: 3,
      standard: 5,
      complex: 7
    };
    
    const expected = expectedReferences[complexity] || 5;
    return Math.min(timeReferences / expected, 1.0);
  }

  checkForTruncation(scenario) {
    const truncationIndicators = [
      '...', 'Á∂ö„Åè', '‰ª•‰∏ãÂêåÊßò', 'ÁúÅÁï•', 'Á≠â„ÄÖ',
      'ÔºàË©≥Á¥∞„ÅØÂà•ÈÄîÔºâ', 'ÔºàÂæåËø∞Ôºâ'
    ];
    
    const hasTruncation = truncationIndicators.some(indicator =>
      scenario.includes(indicator)
    );
    
    return hasTruncation ? 0.3 : 1.0;
  }

  checkRequiredSections(scenario) {
    const requiredSections = [
      '„Çø„Ç§„Éà„É´', '„Ç≥„É≥„Çª„Éó„Éà', '„Ç≠„É£„É©„ÇØ„Çø„Éº', 
      '„Éè„É≥„Éâ„Ç¢„Ç¶„Éà', '‰∫ã‰ª∂', 'ÁúüÁõ∏', 'GM'
    ];
    
    const foundSections = requiredSections.filter(section =>
      scenario.includes(section)
    ).length;
    
    return foundSections / requiredSections.length;
  }

  // ============= „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞ =============

  calculateWeightedScore(checks, weights) {
    let totalScore = 0;
    let totalWeight = 0;
    
    for (const [check, value] of Object.entries(checks)) {
      const weight = weights[check] || 0;
      const score = typeof value === 'boolean' ? (value ? 1 : 0) : value;
      totalScore += score * weight;
      totalWeight += weight;
    }
    
    return totalWeight > 0 ? totalScore / totalWeight : 0;
  }

  calculateOverallScore(metrics) {
    let totalScore = 0;
    
    for (const [metric, score] of Object.entries(metrics)) {
      const weight = this.weightings[metric] || 0;
      totalScore += score * weight;
    }
    
    return Math.min(Math.max(totalScore, 0), 1);
  }

  generateRecommendations(metrics) {
    const recommendations = [];
    
    for (const [metric, score] of Object.entries(metrics)) {
      const threshold = this.qualityThresholds[metric];
      if (score < threshold) {
        recommendations.push(this.getRecommendationForMetric(metric, score));
      }
    }
    
    if (recommendations.length === 0) {
      recommendations.push('üèÜ Á¥†Êô¥„Çâ„Åó„ÅÑÂìÅË≥™„Åß„ÅôÔºÅÂïÜÊ•≠„É¨„Éô„É´„Å´Âà∞ÈÅî„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ');
    }
    
    return recommendations;
  }

  getRecommendationForMetric(metric, score) {
    const recommendations = {
      narrative: `üìñ Áâ©Ë™ûÊÄßÂêë‰∏ä: „Ç≠„É£„É©„ÇØ„Çø„Éº„ÅÆËÉåÊôØ„ÇÑÊÑüÊÉÖÁöÑ„Å™Ë¶ÅÁ¥†„ÇíÂº∑Âåñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ (ÁèæÂú®: ${(score * 100).toFixed(1)}%)`,
      logic: `üîç Ë´ñÁêÜÊÄßÂêë‰∏ä: Ë®ºÊã†„ÇÑÊâã„Åå„Åã„Çä„ÅÆÈÖçÁΩÆ„Çí„Çà„ÇäË´ñÁêÜÁöÑ„Å´ÊßãÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ (ÁèæÂú®: ${(score * 100).toFixed(1)}%)`,
      balance: `‚öñÔ∏è „Éê„É©„É≥„ÇπË™øÊï¥: Èõ£ÊòìÂ∫¶„ÇÑÊÉÖÂ†±Èáè„ÅÆ„Éê„É©„É≥„Çπ„ÇíË™øÊï¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ (ÁèæÂú®: ${(score * 100).toFixed(1)}%)`,
      engagement: `üé≠ È≠ÖÂäõÂ∫¶Âêë‰∏ä: „Çà„ÇäÈ≠ÖÂäõÁöÑ„Å™Â±ïÈñã„ÇÑÈ©ö„Åç„ÅÆË¶ÅÁ¥†„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ (ÁèæÂú®: ${(score * 100).toFixed(1)}%)`,
      completeness: `‚úÖ ÂÆåÂÖ®ÊÄßÂêë‰∏ä: ‰∏çË∂≥„Åó„Å¶„ÅÑ„ÇãË¶ÅÁ¥†„ÇÑË©≥Á¥∞„ÇíË£úÂÆå„Åó„Å¶„Åè„Å†„Åï„ÅÑ (ÁèæÂú®: ${(score * 100).toFixed(1)}%)`,
      consistency: `üîÑ ‰∏ÄË≤´ÊÄßÂêë‰∏ä: Ë®≠ÂÆö„ÇÑÁôªÂ†¥‰∫∫Áâ©„ÅÆ‰∏ÄË≤´ÊÄß„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ (ÁèæÂú®: ${(score * 100).toFixed(1)}%)`
    };
    
    return recommendations[metric] || `${metric}„ÅÆÂìÅË≥™Âêë‰∏ä„ÅåÂøÖË¶Å„Åß„Åô (ÁèæÂú®: ${(score * 100).toFixed(1)}%)`;
  }

  // ============= „Åù„ÅÆ‰ªñ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÈñ¢Êï∞ÔºàÁ∞°Áï•ÂÆüË£ÖÔºâ =============
  
  checkEmotionalHooks(scenario) {
    const emotionalWords = ['ÊÑõ', 'ÊÜé„Åó„Åø', 'Â´âÂ¶¨', 'Âæ©ËÆê', 'ÊÇ≤„Åó„Åø', 'ÊÄí„Çä', 'ÊÅêÊÄñ', 'Â∏åÊúõ'];
    return emotionalWords.some(word => scenario.includes(word)) ? 0.8 : 0.4;
  }

  checkThematicElements(scenario) {
    return scenario.length > 1000 ? 0.9 : 0.6;
  }

  checkForEvidence(scenario) {
    return scenario.includes('Ë®ºÊã†') ? 0.9 : 0.5;
  }

  checkForMotives(scenario) {
    return scenario.includes('ÂãïÊ©ü') ? 0.9 : 0.5;
  }

  checkSolvableStructure(scenario) {
    return scenario.includes('Ëß£Ê±∫') || scenario.includes('ÁúüÁõ∏') ? 0.9 : 0.4;
  }

  checkPlayerBalance(scenario, formData) {
    const participants = parseInt(formData?.participants) || 5;
    const playerReferences = (scenario.match(/„Éó„É¨„Ç§„É§„Éº/g) || []).length;
    return Math.min(playerReferences / participants, 1.0);
  }

  checkDifficultyBalance(scenario) {
    const difficultyIndicators = ['Á∞°Âçò', 'Ê®ôÊ∫ñ', 'Ë§áÈõë', 'Èõ£ÊòìÂ∫¶'];
    return difficultyIndicators.some(ind => scenario.includes(ind)) ? 0.8 : 0.6;
  }

  checkInformationBalance(scenario) {
    return scenario.length > 5000 && scenario.length < 20000 ? 1.0 : 0.7;
  }

  checkForEngagementHooks(scenario) {
    const hooks = ['ÁßòÂØÜ', 'Ë£èÂàá„Çä', 'ÊÑèÂ§ñ', 'Ë°ùÊíÉ', 'È©ö„Åç'];
    return hooks.some(hook => scenario.includes(hook)) ? 0.9 : 0.5;
  }

  checkForConflict(scenario) {
    return scenario.includes('ÂØæÁ´ã') || scenario.includes('‰∫â„ÅÑ') ? 0.8 : 0.6;
  }

  checkForSurprises(scenario) {
    return scenario.includes('„Å©„Çì„Åß„ÇìËøî„Åó') || scenario.includes('ÊÑèÂ§ñ') ? 0.9 : 0.6;
  }

  checkPersonalStakes(scenario) {
    return scenario.includes('ÂÄã‰∫∫ÁöÑ') || scenario.includes('Âà©ÂÆ≥') ? 0.8 : 0.6;
  }

  checkAtmosphere(scenario) {
    const atmosphereWords = ['Èõ∞Âõ≤Ê∞ó', 'Á∑äÂºµ', '‰∏çÂÆâ', 'ÊÅêÊÄñ', 'Á•ûÁßò'];
    return atmosphereWords.some(word => scenario.includes(word)) ? 0.8 : 0.5;
  }

  checkCharacterCompleteness(scenario) {
    return scenario.includes('„Éè„É≥„Éâ„Ç¢„Ç¶„Éà') ? 0.9 : 0.4;
  }

  checkGMGuidance(scenario) {
    return scenario.includes('GM') || scenario.includes('„Ç≤„Éº„É†„Éû„Çπ„Çø„Éº') ? 0.9 : 0.3;
  }

  checkResolution(scenario) {
    return scenario.includes('Ëß£Ê±∫') || scenario.includes('„Ç®„É≥„Éá„Ç£„É≥„Ç∞') ? 0.9 : 0.4;
  }

  checkCharacterConsistency(scenario) {
    return 0.8; // Á∞°Áï•ÂÆüË£Ö
  }

  checkToneConsistency(scenario) {
    return 0.8; // Á∞°Áï•ÂÆüË£Ö
  }

  checkSettingConsistency(scenario) {
    return 0.8; // Á∞°Áï•ÂÆüË£Ö
  }
}

export const qualityAssessor = new QualityAssessor();

