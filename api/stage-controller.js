/**
 * üéØ ÊÆµÈöéÂà•FunctionÂà∂Âæ°„Ç∑„Çπ„ÉÜ„É†
 * VercelÁÑ°Êñô„Éó„É©„É≥ÂØæÂøúÔºà10ÁßíÂà∂ÈôêÔºâ- „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ„ÉªÈÄ≤Ë°åÂà∂Âæ°
 */

const { withSecurity } = require('./security-utils.js');
const { logger } = require('./utils/logger.js');
const { saveScenarioToSupabase, getScenarioFromSupabase } = require('./supabase-client.js');

// „É°„É¢„É™„Çπ„Éà„É¨„Éº„Ç∏ÔºàSupabaseÊú™Ë®≠ÂÆöÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
const memoryStorage = new Map();

/**
 * „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„Çí‰øùÂ≠òÔºàSupabase„Åæ„Åü„ÅØ„É°„É¢„É™Ôºâ
 */
async function saveSessionData(sessionId, data) {
  try {
    const result = await saveScenarioToSupabase(sessionId, data);
    if (!result || !result.success) {
      throw new Error('Supabase save failed');
    }
  } catch (error) {
    logger.warn(`‚ö†Ô∏è Using memory storage for session ${sessionId}`);
    memoryStorage.set(sessionId, data);
  }
}

/**
 * „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÇíÂèñÂæóÔºàSupabase„Åæ„Åü„ÅØ„É°„É¢„É™Ôºâ
 */
async function getSessionData(sessionId) {
  try {
    const result = await getScenarioFromSupabase(sessionId);
    if (result && result.success && result.data) {
      return result.data.scenario_data || result.data;
    }
  } catch (error) {
    logger.warn(`‚ö†Ô∏è Supabase read failed, checking memory for ${sessionId}`);
  }
  
  // „É°„É¢„É™„Åã„ÇâÂèñÂæó
  return memoryStorage.get(sessionId);
}

/**
 * ÊÆµÈöéÂà∂Âæ°„ÅÆÊ†∏„Å®„Å™„Çã„Éè„É≥„Éâ„É©„Éº
 */
async function stageController(req, res) {
  const startTime = Date.now();

  try {
    const { action, sessionId, stageIndex, formData } = req.body;

    switch (action) {
      case 'initialize':
        return await initializeSession(req, res);
      
      case 'get_status':
        return await getSessionStatus(req, res);
      
      case 'execute_stage':
        return await executeStage(req, res);
      
      case 'get_result':
        return await getFinalResult(req, res);
      
      case 'cleanup':
        return await cleanupSession(req, res);
      
      default:
        return res.status(400).json({
          success: false,
          error: `Unknown action: ${action}`
        });
    }

  } catch (error) {
    const executionTime = Date.now() - startTime;
    logger.error(`Stage Controller Error [${executionTime}ms]:`, error);

    return res.status(500).json({
      success: false,
      error: error.message,
      executionTime: executionTime
    });
  }
}

/**
 * „Çª„ÉÉ„Ç∑„Éß„É≥ÂàùÊúüÂåñ
 */
async function initializeSession(req, res) {
  const { formData } = req.body;
  const sessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;

  const sessionData = {
    sessionId: sessionId,
    formData: formData,
    currentStageIndex: 0,
    totalStages: 9,
    status: 'initialized',
    createdAt: new Date().toISOString(),
    lastUpdate: new Date().toISOString(),
    stages_completed: [],
    free_plan_optimized: true
  };

  try {
    // „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„Çí‰øùÂ≠ò
    await saveSessionData(sessionId, sessionData);
    logger.info(`‚úÖ Session initialized: ${sessionId}`);

    return res.status(200).json({
      success: true,
      sessionId: sessionId,
      status: 'initialized',
      totalStages: 9,
      currentStage: 0,
      nextAction: 'execute_stage',
      nextStageIndex: 0
    });

  } catch (error) {
    logger.error('Session initialization failed:', error);
    return res.status(500).json({
      success: false,
      error: '„Çª„ÉÉ„Ç∑„Éß„É≥ÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
    });
  }
}

/**
 * „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖãÂèñÂæó
 */
async function getSessionStatus(req, res) {
  const { sessionId } = req.body;

  if (!sessionId) {
    return res.status(400).json({
      success: false,
      error: 'sessionId„ÅåÂøÖË¶Å„Åß„Åô'
    });
  }

  try {
    const sessionData = await getSessionData(sessionId);
    
    if (!sessionData) {
      return res.status(404).json({
        success: false,
        error: '„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      });
    }

    const progress = calculateProgress(sessionData.currentStageIndex, sessionData.totalStages);

    return res.status(200).json({
      success: true,
      sessionId: sessionId,
      status: sessionData.status,
      currentStageIndex: sessionData.currentStageIndex,
      totalStages: sessionData.totalStages,
      progress: progress,
      stages_completed: sessionData.stages_completed || [],
      lastUpdate: sessionData.lastUpdate,
      nextAction: getNextAction(sessionData)
    });

  } catch (error) {
    logger.error('Status retrieval failed:', error);
    return res.status(500).json({
      success: false,
      error: '„Çπ„ÉÜ„Éº„Çø„ÇπÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
    });
  }
}

/**
 * ÊÆµÈöéÂÆüË°å
 */
async function executeStage(req, res) {
  const { sessionId, stageIndex } = req.body;

  if (!sessionId || stageIndex === undefined) {
    return res.status(400).json({
      success: false,
      error: 'sessionId„Å®stageIndex„ÅåÂøÖË¶Å„Åß„Åô'
    });
  }

  try {
    // „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„ÇøÂèñÂæó
    const sessionData = await getSessionData(sessionId);
    if (!sessionData) {
      return res.status(404).json({
        success: false,
        error: '„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      });
    }

    // ÊÆµÈöéÂÆüË°åÊ∫ñÂÇô
    const stageUrl = getStageUrl(stageIndex);
    const stagePayload = {
      sessionId: sessionId,
      stageIndex: stageIndex,
      ...sessionData
    };

    logger.info(`üéØ Executing stage ${stageIndex} for session ${sessionId}`);

    // ÊÆµÈöéFunctionÂëº„Å≥Âá∫„ÅóÔºàÂÜÖÈÉ®APIÂëº„Å≥Âá∫„ÅóÔºâ
    const stageResponse = await callStageFunction(stageUrl, stagePayload);

    if (!stageResponse.success) {
      throw new Error(`Stage ${stageIndex} execution failed: ${stageResponse.error}`);
    }

    // „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
    sessionData.currentStageIndex = stageIndex + 1;
    sessionData.stages_completed = sessionData.stages_completed || [];
    if (!sessionData.stages_completed.includes(stageIndex)) {
      sessionData.stages_completed.push(stageIndex);
    }
    sessionData[`stage${stageIndex}_result`] = stageResponse.result;
    sessionData.lastUpdate = new Date().toISOString();
    
    // ÂÖ®„Çπ„ÉÜ„Éº„Ç∏ÂÆå‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ
    if (stageIndex >= 8) {
      sessionData.status = 'completed';
      sessionData.scenario_completed = true;
      sessionData.completion_timestamp = new Date().toISOString();
    } else {
      sessionData.status = 'generating';
    }
    
    // Êõ¥Êñ∞„Åó„Åü„Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„Çí‰øùÂ≠ò
    await saveSessionData(sessionId, sessionData);
    logger.info(`‚úÖ Stage ${stageIndex} completed and session updated for ${sessionId}`);

    // ÈÄ≤ÊçóË®àÁÆó
    const progress = calculateProgress(stageIndex + 1, sessionData.totalStages);

    return res.status(200).json({
      success: true,
      sessionId: sessionId,
      stageIndex: stageIndex,
      stageName: `stage${stageIndex}`,
      result: stageResponse.result,
      progress: progress,
      executionTime: stageResponse.executionTime,
      nextAction: getNextActionForStage(stageIndex + 1),
      completed: stageIndex >= 8
    });

  } catch (error) {
    logger.error(`Stage ${stageIndex} execution failed:`, error);
    return res.status(500).json({
      success: false,
      error: error.message,
      stageIndex: stageIndex
    });
  }
}

/**
 * ÊúÄÁµÇÁµêÊûúÂèñÂæó
 */
async function getFinalResult(req, res) {
  const { sessionId } = req.body;

  try {
    const sessionData = await getSessionData(sessionId);
    
    if (!sessionData) {
      return res.status(404).json({
        success: false,
        error: '„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      });
    }

    if (!sessionData.scenario_completed) {
      return res.status(400).json({
        success: false,
        error: '„Ç∑„Éä„É™„Ç™ÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì'
      });
    }

    return res.status(200).json({
      success: true,
      sessionId: sessionId,
      scenario: formatFinalScenario(sessionData),
      completed: true,
      completedAt: sessionData.completion_timestamp
    });

  } catch (error) {
    logger.error('Final result retrieval failed:', error);
    return res.status(500).json({
      success: false,
      error: 'ÊúÄÁµÇÁµêÊûúÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
    });
  }
}

/**
 * „Çª„ÉÉ„Ç∑„Éß„É≥„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
 */
async function cleanupSession(req, res) {
  const { sessionId } = req.body;

  try {
    // „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÅÆÂâäÈô§„ÅØÂÆüË£Ö„Å´Âøú„Åò„Å¶
    logger.info(`üßπ Session cleanup: ${sessionId}`);

    return res.status(200).json({
      success: true,
      message: '„Çª„ÉÉ„Ç∑„Éß„É≥„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Åó„Åæ„Åó„Åü'
    });

  } catch (error) {
    logger.error('Session cleanup failed:', error);
    return res.status(500).json({
      success: false,
      error: '„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
    });
  }
}

/**
 * „Éò„É´„Éë„ÉºÈñ¢Êï∞Áæ§
 */

function getStageUrl(stageIndex) {
  return `/api/stage-generator/stage${stageIndex}`;
}

async function callStageFunction(url, payload) {
  try {
    // ÂÜÖÈÉ®APIÂëº„Å≥Âá∫„Åó„ÅÆÂÆüË£Ö
    // ÂÆüÈöõ„ÅÆÁí∞Â¢É„Åß„ÅØ fetch „Åæ„Åü„ÅØÁõ¥Êé•Èñ¢Êï∞Âëº„Å≥Âá∫„Åó
    logger.info(`üìû Calling stage${payload.stageIndex} function`);
    const stageModule = require(`./stage-generator/stage${payload.stageIndex}.js`);
    
    // „É¢„ÉÉ„ÇØ„É™„ÇØ„Ç®„Çπ„Éà„Éª„É¨„Çπ„Éù„É≥„Çπ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà‰ΩúÊàê
    const mockReq = {
      method: 'POST',
      body: payload
    };
    
    let result = null;
    const mockRes = {
      status: (code) => ({
        json: (data) => {
          result = { statusCode: code, ...data };
          return result;
        }
      })
    };

    await stageModule(mockReq, mockRes);
    
    if (!result) {
      throw new Error('No response from stage function');
    }
    
    logger.info(`‚úÖ Stage${payload.stageIndex} completed with status: ${result.statusCode}`);
    return result;
  } catch (error) {
    logger.error(`‚ùå Stage${payload.stageIndex} function error:`, error);
    throw error;
  }
}

function calculateProgress(currentStage, totalStages) {
  const stageWeights = [15, 10, 12, 13, 35, 18, 8, 5, 4];
  const totalWeight = stageWeights.reduce((sum, weight) => sum + weight, 0);
  
  let completedWeight = 0;
  for (let i = 0; i < currentStage; i++) {
    completedWeight += stageWeights[i] || 10;
  }
  
  return Math.round((completedWeight / totalWeight) * 100);
}

function getNextAction(sessionData) {
  if (sessionData.scenario_completed) {
    return 'get_result';
  } else if (sessionData.currentStageIndex < sessionData.totalStages) {
    return 'execute_stage';
  } else {
    return 'finalize';
  }
}

function getNextActionForStage(nextStageIndex) {
  if (nextStageIndex >= 9) {
    return 'get_result';
  } else {
    return 'execute_stage';
  }
}

function formatFinalScenario(sessionData) {
  return {
    title: extractTitle(sessionData.random_outline),
    outline: sessionData.random_outline,
    concept: sessionData.concept_detail,
    incident: sessionData.incident_core,
    details: sessionData.incident_details,
    characters: sessionData.characters,
    evidence: sessionData.evidence_system,
    gmGuide: sessionData.gm_guide,
    integration: sessionData.integration_check,
    qualityCheck: sessionData.final_quality_check,
    completedAt: sessionData.completion_timestamp
  };
}

function extractTitle(outline) {
  if (!outline) return '„Éû„Éº„ÉÄ„Éº„Éü„Çπ„ÉÜ„É™„Éº';
  const match = outline.match(/„Çø„Ç§„Éà„É´[:Ôºö]?\s*(.+)|title[:Ôºö]?\s*(.+)/i);
  return match ? (match[1] || match[2]).trim() : '„Éû„Éº„ÉÄ„Éº„Éü„Çπ„ÉÜ„É™„Éº';
}

function getNextActionForStage(nextStageIndex) {
  if (nextStageIndex >= 9) {
    return 'complete';
  }
  return `execute_stage_${nextStageIndex}`;
}


// ÂÜÖÈÉ®Âëº„Å≥Âá∫„ÅóÁî®„Å´Áîü„ÅÆÈñ¢Êï∞„ÇÇ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
module.exports = withSecurity(stageController, 'stage-control');
module.exports.stageControllerDirect = stageController; // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É©„ÉÉ„Éó„Å™„ÅóÁâà